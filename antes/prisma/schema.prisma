// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// prisma generate: npx prisma generate
// prisma migrate: npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id             String         @id @default(cuid())
  roleId         String
  userFunctionId String
  image          String         @default("/img/profile.png")
  name           String         @db.Text
  bio            String?
  email          String         @unique
  emailVerified  DateTime?      @map("email_verified")
  password       String? // hash format bcrypt
  role           Role           @relation(fields: [roleId], references: [id])
  userFunction   UserFunction   @relation(fields: [userFunctionId], references: [id])
  calendars      Calendar[]
  qaQuestions    QaQuestion[]
  qaAnswers      QaAnswer[]
  userProgress   UserProgress[]
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model Role {
  id    String @id @default(cuid())
  level Int
  name  String @db.Text
  users User[]
}

model UserFunction {
  id    String @id @default(cuid())
  name  String @db.Text
  users User[]
}

model Event {
  id          String     @id @default(cuid())
  title       String     @db.Text
  description String     @db.Text
  location    String     @db.Text
  image       String     @default("/img/event_card.png")
  dateStart   DateTime
  dateEnd     DateTime
  calendars   Calendar[]
}

model Calendar {
  id      String @id @default(cuid())
  userId  String
  eventId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  event   Event  @relation(fields: [eventId], references: [id])
}

model QaQuestion {
  id         String     @id @default(cuid())
  userId     String
  title      String     @db.Text
  dateCreate DateTime
  image      String     @default("/img/qa_card.png")
  tags       Json?
  user       User       @relation(fields: [userId], references: [id])
  qaAnswers  QaAnswer[]
}

model QaAnswer {
  id         String     @id @default(cuid())
  questionId String
  userId     String
  comment    String     @db.Text
  dateCreate DateTime
  qaQuestion QaQuestion @relation(fields: [questionId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
}

model Subject {
  id          String   @id @default(cuid())
  title       String   @db.Text
  description String   @db.Text
  image       String   @default("/img/elearning.png")
  lessons     Lesson[]
}

model Lesson {
  id           String         @id @default(cuid())
  subjectId    String
  quizId       String?
  order        Int
  title        String         @db.Text
  lessonData   Json
  subject      Subject        @relation(fields: [subjectId], references: [id])
  quiz         Quiz?          @relation(fields: [quizId], references: [id])
  userProgress UserProgress[]
}

model Quiz {
  id       String   @id @default(cuid())
  quizData Json
  lessons  Lesson[]
}

model UserProgress {
  id       String @id @default(cuid())
  userId   String
  lessonId String
  user     User   @relation(fields: [userId], references: [id])
  lesson   Lesson @relation(fields: [lessonId], references: [id])
}
